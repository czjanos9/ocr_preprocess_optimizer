trainData//test-1-1-1-0(0)/currResultA-1-1-1-0.txt
Blur:1,Canny:1,dilate:1,Erode:0,

1.
bevezetés
neumann
jános!
fogalmazta
meg
a
tárolt
program
elvét,
miszerint
a
programutasítások
és
az.
adatok
azonos
formában
(binárisan),
ugyanabban
a
belső
memóriában
helyezkednek
el.
így
van
ez
a
legkorszerűbb
számítógépnél
is.
ez
azt
jelenti,
hogy
a
számítógépen
bármilyen
programozási
nyelvet
is
használunk,
az
eredmény
mindig
egy
bináris
—
az
operatív
memóriá-
ba
tölthető
—
számsor
(programsor).
az
első
számítógépeket
gépi
kódban
programozták,
az
utasításokat
bináris
számok
for-
májában
kellett
a
memóriába
táplálni.
1946-ban
kezdték
használni
a
mmemonikus
kódokat,
majd
a
szimbolikus
nyelveket,
amelyekkel
nagymértékben
megnövelték
a
programírás
haté-
konyságát.
1949-ben
készítették
el
az
első
assembler
programot.
a
programozás
során
mindig
egy
folyamatot
írunk
le.
elképzeljük,
hogy
egy
feladatot
hogyan
oldanánk
meg
(milyen
folyamattal
tudnánk
leírni),
és
azt
próbáljuk
a
számítógéppel
elvégeztetni.
így,
egy
programozási
nyelvnek,
illetve
fordítóprogramnak
az
a
feladata,
hogy
megteremtse
a
kapcsolatot
az
emberi
gondolatok
és
a
cpu
utasítás-végrehajtása
között.
minél
közelebb
áll
egy
programozási
nyelv
az
emberi
gondolkodáshoz,
minél
egysze-
rűbben
lehet
leírni
benne
a
feladatot,
annál
magasabb
színtű
nyelvről
(programozási
nyelv-
ről)
beszélhetünk.
(un.
mondatleíró
nyelven
írunk
programot.)
ekkor
a
fordítóprogramra
hárul
a
nagyobb
feladat,
hogy
a
gépi
kódot
(futtatható
állományt)
előállítsa.
ez
azonban
nem
a
lehető
legoptimálisabb,
így
a
program
működéséhez
felesleges
utasításokat
is
kénytelen
a
processzor
végrehajtani,
ami
megnöveli
a
program
erőforrásigényét.
manapság
—
a
korszerű,
nagysebességű
processzorok
korában
-
a
programozók
nagy
része
ezzel
nem
törődik.
amikor
programjaink
optimalizálása,
sebességének
növelése
a
célunk,
assembíyben
(ala-
csony
szinten)
kell
a
programunkat
elkészíteni.
ekkor
viszont
a
programozóra
hárul
a
na-
gyobb
feladat,
hiszen
neki
kell
úgy
megfogalmazni
a
feladatát,
ahogy
a
cpu
,
gondolkodik".
vannak
esetek,
amikor
az
assembly
írásakor
nem
az
optímalizálás
a
célunk.
ilyen,
ami-
kor
egy
magas
színű
nyelv
nincs
felkészítve
bizonyos
feladatok
elvégzésére:
különböző
konverziók,
erőforrások
és
portok
kezelése,
stb.
ahhoz,
hogy
az
assembly-t
hatékonyan
tudjuk
használni,
meg
kel!
ismerni
a
számítógé-
pek,
mikroprocesszorok
felépítését,
és
a
bináris
aritmetikát.
e
témákkal
foglalkozik
a
jegyzet
első
része.
ezután
kerül
ismertetésre
az
intel
mikroprocesszorok
működése
és
programozásuk.
a
jegyzet
egyszerű
példák
segítségével,
lépésről-lépésre
ismerteti
az
utasításokat
és
a
masm
(microsoft
macro
assembly)
nyelvet.
itt
foglalkozunk
azzal
is,
hogy
milyen
módon
lehet
meghívni
egy
assembly
rutint
magas
színtű
programozási
nyelvből.
a
függelékben
—
többek
között
-
összefoglalásra
kerül
az
intel
processzorok
alap-
utasításkészlete
és
a
megszakítások
(interrup-ok)
kezelése
is.
!
neumann
jános
(john
von
neumann)
1903.
december
28-án
született
budapesten.
1925-ben
a
zü-
rich-i
egyetemen
vegyészmérnöki
diplomát
szerzett,
majd
1926-ban,
budapesten.
matematikából
doktorált.
1930-ban
meghívták
a
princeton
egyetemre,
ahol
nem
sokkal
késöbb
professzorrá
nevez-
ték
ki.
fő
kutatási
terüjele
a
matematikai
logika,
it
játékelmélet
ég
a
halmazelmélet
volt,
de
foglalko-
70tt
fizikai
problémák
megoldásával
ís.
a
ii.
világháborút
követően
több
számítógépes
szabadalom
fűződik
a
nevéhez.
5